import 'package:finance_helper/data/dao/category_dao.dart';
import 'package:finance_helper/data/dao/transfer_dao.dart';
import 'package:finance_helper/data/models/category.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart' as p;
import 'package:finance_helper/data/dao/card_dao.dart';
import 'package:finance_helper/data/dao/transaction_dao.dart';
import 'package:finance_helper/data/dao/cashback_dao.dart';
import 'package:finance_helper/data/dao/subscription_dao.dart';
import 'package:finance_helper/data/dao/financial_goal_dao.dart';
import 'package:finance_helper/data/models/card.dart';
import 'package:finance_helper/data/models/transaction.dart';
import 'dart:math';

class AppDatabase {
  static final AppDatabase instance = AppDatabase._();
  static Database? _database;

  // Private DAOs
  late final CardDao _cardDao;
  late final TransactionDao _transactionDao;
  late final CashbackDao _cashbackDao;
  late final SubscriptionDao _subscriptionDao;
  late final FinancialGoalDao _financialGoalDao;
  late final TransferDao _transferDao;
  late final CategoryDao _categoryDao;

  AppDatabase._();

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDB('finance.db');
    await _initializeDaos();
    return _database!;
  }

  Future<Database> _initDB(String filePath) async {
    final dbPath = await getDatabasesPath();
    final path = p.join(dbPath, filePath);
    return await openDatabase(
      path,
      version: 1,
      onCreate: _createDB,
    );
  }

  Future<void> _initializeDaos() async {
    final db = await database;
    _cardDao = CardDao(db);
    _transactionDao = TransactionDao(db);
    _cashbackDao = CashbackDao(db);
    _subscriptionDao = SubscriptionDao(db);
    _financialGoalDao = FinancialGoalDao(db);
    _transferDao = TransferDao(db);
    _categoryDao = CategoryDao(db);
  }

  Future<void> _createDB(Database db, int version) async {
    await db.execute('''
      CREATE TABLE transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        amount REAL NOT NULL,
        category TEXT NOT NULL,
        date TEXT NOT NULL,
        type TEXT NOT NULL,
        card_id INTEGER NOT NULL,
        description TEXT,
        FOREIGN KEY (card_id) REFERENCES cards (id) ON DELETE CASCADE
      )
    ''');
    await db.execute('''
      CREATE TABLE transfers (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        source_card_id INTEGER NOT NULL,
        destination_card_id INTEGER NOT NULL,
        amount REAL NOT NULL,
        date TEXT NOT NULL,
        description TEXT,
        FOREIGN KEY (source_card_id) REFERENCES cards (id) ON DELETE CASCADE,
        FOREIGN KEY (destination_card_id) REFERENCES cards (id) ON DELETE CASCADE
      )
    ''');
    await db.execute('''
      CREATE TABLE cards (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL
      )
    ''');
    await db.execute('''
      CREATE TABLE subscriptions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        amount REAL NOT NULL,
        renewal_date TEXT NOT NULL,
        card_id INTEGER NOT NULL,
        FOREIGN KEY (card_id) REFERENCES cards (id) ON DELETE CASCADE
      )
    ''');
    await db.execute('''
      CREATE TABLE financial_goals (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        target_amount REAL NOT NULL,
        saved_amount REAL NOT NULL,
        deadline TEXT
      )
    ''');
    await db.execute('''
      CREATE TABLE cashback (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        cardId INTEGER NOT NULL,
        category TEXT NOT NULL,
        percentage REAL NOT NULL,
        FOREIGN KEY (cardId) REFERENCES cards (id) ON DELETE CASCADE
      )
    ''');
    await db.execute('''
      CREATE TABLE categories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        emoji TEXT
      )
    ''');
    await db.execute('''
      CREATE TABLE subcategories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        category_id INTEGER NOT NULL,
        name TEXT NOT NULL,
        emoji TEXT,
        FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE
      )
    ''');
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã DAO
  CardDao get cardDao => _cardDao;
  TransactionDao get transactionDao => _transactionDao;
  CashbackDao get cashbackDao => _cashbackDao;
  SubscriptionDao get subscriptionDao => _subscriptionDao;
  FinancialGoalDao get financialGoalDao => _financialGoalDao;
  TransferDao get transferDao => _transferDao;
  CategoryDao get categoryDao => _categoryDao;

  Future<void> close() async {
    final db = await instance.database;
    db.close();
  }

  Future<void> recreateAndFillDatabaseWithTestData() async {
    final dbPath = await getDatabasesPath();
    final path = p.join(dbPath, 'finance.db');
    await deleteDatabase(path);
    _database = null;
    await database;

    final cards = [
      CardModel(name: '–°–±–µ—Ä–±–∞–Ω–∫'),
      CardModel(name: '–¢–∏–Ω—å–∫–æ—Ñ—Ñ'),
      CardModel(name: '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω'),
      CardModel(name: '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫'),
    ];

    for (final card in cards) {
      await AppDatabase.instance.cardDao.insertCard(card);
    }

    final insertedCards = await AppDatabase.instance.cardDao.getAllCards();
    final random = Random();

    final categories = ['–ï–¥–∞', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–ó–∞—Ä–ø–ª–∞—Ç–∞', '–û–¥–µ–∂–¥–∞', '–î–æ–º', '–ü–æ–¥–∞—Ä–∫–∏'];
    final types = [TransactionType.expense, TransactionType.income, TransactionType.transfer];

    final now = DateTime.now();

    for (int i = 0; i < 20; i++) {
      final type = types[random.nextInt(types.length)];
      final cardId = insertedCards[random.nextInt(insertedCards.length)].id!;
      final amount = double.parse((random.nextDouble() * 1000).toStringAsFixed(2));
      final date = now.subtract(Duration(days: random.nextInt(30)));
      if (type == TransactionType.transfer) {
        await AppDatabase.instance.transferDao.insertTransfer(
            TransferModel(
              amount: amount,
              date: date,
              sourceCardId: cardId,
              destinationCardId: insertedCards.where((c) => c.id != cardId).toList()[random.nextInt(insertedCards.length - 1)].id!,
            )
        );
      }
      else {
        await AppDatabase.instance.transactionDao.insertTransaction(
            TransactionModel(
              amount: amount,
              category: categories[random.nextInt(categories.length)],
              date: date,
              type: type,
              cardId: cardId,
            )
        );
      }
    }
  }

  Future<void> setDefaultCategories() async {
    // –ó–Ω–∞—á–∏—Ç —É–∂–µ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if ((await AppDatabase.instance.categoryDao.getAllCategories()).isNotEmpty) {
      return;
    }
    // –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    final defaultCategories = [
      CategoryModel(name: '–ï–¥–∞ –∏ –ø–∏—Ç–∞–Ω–∏–µ', emoji: 'üçΩÔ∏è'),
      CategoryModel(name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', emoji: 'üöó'),
      CategoryModel(name: '–ñ–∏–ª—å—ë', emoji: 'üè†'),
      CategoryModel(name: '–ü–æ–∫—É–ø–∫–∏', emoji: 'üõçÔ∏è'),
      CategoryModel(name: '–ó–¥–æ—Ä–æ–≤—å–µ', emoji: 'üè•'),
      CategoryModel(name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', emoji: 'üé≠'),
      CategoryModel(name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', emoji: '‚úàÔ∏è'),
      CategoryModel(name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', emoji: 'üìö'),
      CategoryModel(name: '–§–∏–Ω–∞–Ω—Å—ã', emoji: 'üí∞'),
      CategoryModel(name: '–î–æ—Ö–æ–¥', emoji: 'üíµ'),
      CategoryModel(name: '–ü–æ–¥–ø–∏—Å–∫–∏', emoji: 'üì±'),
    ];

    for (final category in defaultCategories) {
      await AppDatabase.instance.categoryDao.insertCategory(category);
    }

    final insertedCategories = await AppDatabase.instance.categoryDao.getAllCategories();
    
    // –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π (–¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è insertedCategories)
    final defaultSubcategories = [
      // –ï–¥–∞ –∏ –ø–∏—Ç–∞–Ω–∏–µ
      SubcategoryModel(categoryId: insertedCategories[0].id!, name: '–ü—Ä–æ–¥—É–∫—Ç—ã', emoji: 'üõí'),
      SubcategoryModel(categoryId: insertedCategories[0].id!, name: '–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', emoji: 'üçù'),
      SubcategoryModel(categoryId: insertedCategories[0].id!, name: '–î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã', emoji: 'üõµ'),
      SubcategoryModel(categoryId: insertedCategories[0].id!, name: '–§–∞—Å—Ç—Ñ—É–¥', emoji: 'üçî'),
      SubcategoryModel(categoryId: insertedCategories[0].id!, name: '–ö–æ—Ñ–µ–π–Ω–∏', emoji: '‚òï'),
      
      // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
      SubcategoryModel(categoryId: insertedCategories[1].id!, name: '–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', emoji: 'üöá'),
      SubcategoryModel(categoryId: insertedCategories[1].id!, name: '–¢–∞–∫—Å–∏', emoji: 'üöï'),
      SubcategoryModel(categoryId: insertedCategories[1].id!, name: '–¢–æ–ø–ª–∏–≤–æ', emoji: '‚õΩ'),
      SubcategoryModel(categoryId: insertedCategories[1].id!, name: '–ü–∞—Ä–∫–æ–≤–∫–∞', emoji: 'üÖøÔ∏è'),
      SubcategoryModel(categoryId: insertedCategories[1].id!, name: '–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å', emoji: 'üîß'),
      
      // –ñ–∏–ª—å—ë
      SubcategoryModel(categoryId: insertedCategories[2].id!, name: '–ê—Ä–µ–Ω–¥–∞', emoji: 'üîë'),
      SubcategoryModel(categoryId: insertedCategories[2].id!, name: '–ò–ø–æ—Ç–µ–∫–∞', emoji: 'üè¶'),
      SubcategoryModel(categoryId: insertedCategories[2].id!, name: '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏', emoji: 'üí°'),
      SubcategoryModel(categoryId: insertedCategories[2].id!, name: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –¢–í', emoji: 'üì°'),
      SubcategoryModel(categoryId: insertedCategories[2].id!, name: '–†–µ–º–æ–Ω—Ç', emoji: 'üî®'),
      
      // –ü–æ–∫—É–ø–∫–∏
      SubcategoryModel(categoryId: insertedCategories[3].id!, name: '–û–¥–µ–∂–¥–∞', emoji: 'üëï'),
      SubcategoryModel(categoryId: insertedCategories[3].id!, name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', emoji: 'üì±'),
      SubcategoryModel(categoryId: insertedCategories[3].id!, name: '–ö–æ—Å–º–µ—Ç–∏–∫–∞', emoji: 'üíÑ'),
      SubcategoryModel(categoryId: insertedCategories[3].id!, name: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞', emoji: 'üè°'),
      SubcategoryModel(categoryId: insertedCategories[3].id!, name: '–ü–æ–¥–∞—Ä–∫–∏', emoji: 'üéÅ'),
      
      // –ó–¥–æ—Ä–æ–≤—å–µ
      SubcategoryModel(categoryId: insertedCategories[4].id!, name: '–õ–µ–∫–∞—Ä—Å—Ç–≤–∞', emoji: 'üíä'),
      SubcategoryModel(categoryId: insertedCategories[4].id!, name: '–í—Ä–∞—á', emoji: 'üë®‚Äç‚öïÔ∏è'),
      SubcategoryModel(categoryId: insertedCategories[4].id!, name: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è', emoji: 'ü¶∑'),
      SubcategoryModel(categoryId: insertedCategories[4].id!, name: '–§–∏—Ç–Ω–µ—Å', emoji: 'üèãÔ∏è'),
      SubcategoryModel(categoryId: insertedCategories[4].id!, name: '–°–∞–ª–æ–Ω—ã –∫—Ä–∞—Å–æ—Ç—ã', emoji: 'üíá'),
      
      // –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
      SubcategoryModel(categoryId: insertedCategories[5].id!, name: '–ö–∏–Ω–æ', emoji: 'üé¨'),
      SubcategoryModel(categoryId: insertedCategories[5].id!, name: '–ö–æ–Ω—Ü–µ—Ä—Ç—ã', emoji: 'üéµ'),
      SubcategoryModel(categoryId: insertedCategories[5].id!, name: '–ò–≥—Ä—ã', emoji: 'üéÆ'),
      SubcategoryModel(categoryId: insertedCategories[5].id!, name: '–•–æ–±–±–∏', emoji: 'üé®'),
      SubcategoryModel(categoryId: insertedCategories[5].id!, name: '–ö–Ω–∏–≥–∏', emoji: 'üìö'),
      
      // –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
      SubcategoryModel(categoryId: insertedCategories[6].id!, name: '–û—Ç–µ–ª–∏', emoji: 'üè®'),
      SubcategoryModel(categoryId: insertedCategories[6].id!, name: '–ê–≤–∏–∞–±–∏–ª–µ—Ç—ã', emoji: '‚úàÔ∏è'),
      SubcategoryModel(categoryId: insertedCategories[6].id!, name: '–≠–∫—Å–∫—É—Ä—Å–∏–∏', emoji: 'üß≥'),
      SubcategoryModel(categoryId: insertedCategories[6].id!, name: '–°—É–≤–µ–Ω–∏—Ä—ã', emoji: 'üé™'),
      
      // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
      SubcategoryModel(categoryId: insertedCategories[7].id!, name: '–ö—É—Ä—Å—ã', emoji: 'üë®‚Äçüè´'),
      SubcategoryModel(categoryId: insertedCategories[7].id!, name: '–£—á–µ–±–Ω–∏–∫–∏', emoji: 'üìñ'),
      SubcategoryModel(categoryId: insertedCategories[7].id!, name: '–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã', emoji: 'üë©‚Äçüéì'),
      
      // –§–∏–Ω–∞–Ω—Å—ã
      SubcategoryModel(categoryId: insertedCategories[8].id!, name: '–ö—Ä–µ–¥–∏—Ç—ã', emoji: 'üí≥'),
      SubcategoryModel(categoryId: insertedCategories[8].id!, name: '–ö–æ–º–∏—Å—Å–∏–∏', emoji: 'üßæ'),
      SubcategoryModel(categoryId: insertedCategories[8].id!, name: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', emoji: 'üîí'),
      SubcategoryModel(categoryId: insertedCategories[8].id!, name: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', emoji: 'üìà'),
      
      // –î–æ—Ö–æ–¥
      SubcategoryModel(categoryId: insertedCategories[9].id!, name: '–ó–∞—Ä–ø–ª–∞—Ç–∞', emoji: 'üíº'),
      SubcategoryModel(categoryId: insertedCategories[9].id!, name: '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞', emoji: 'üë®‚Äçüíª'),
      SubcategoryModel(categoryId: insertedCategories[9].id!, name: '–ë–æ–Ω—É—Å—ã', emoji: 'üéØ'),
      SubcategoryModel(categoryId: insertedCategories[9].id!, name: '–î–∏–≤–∏–¥–µ–Ω–¥—ã', emoji: 'üìä'),
      SubcategoryModel(categoryId: insertedCategories[9].id!, name: '–ü–æ–¥–∞—Ä–∫–∏', emoji: 'üéä'),
      
      // –ü–æ–¥–ø–∏—Å–∫–∏
      SubcategoryModel(categoryId: insertedCategories[10].id!, name: '–°—Ç—Ä–∏–º–∏–Ω–≥', emoji: 'üì∫'),
      SubcategoryModel(categoryId: insertedCategories[10].id!, name: '–ú—É–∑—ã–∫–∞', emoji: 'üéµ'),
      SubcategoryModel(categoryId: insertedCategories[10].id!, name: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è', emoji: 'üì≤'),
      SubcategoryModel(categoryId: insertedCategories[10].id!, name: '–ò–≥—Ä–æ–≤—ã–µ', emoji: 'üéÆ'),
      SubcategoryModel(categoryId: insertedCategories[10].id!, name: '–î—Ä—É–≥–∏–µ', emoji: 'üîÑ'),
    ];

    for (final subcategory in defaultSubcategories) {
      await AppDatabase.instance.categoryDao.insertSubcategory(subcategory);
    }
  }

}
